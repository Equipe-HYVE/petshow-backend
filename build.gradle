plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'hyve.petshow'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'me.paulschwarz:spring-dotenv:2.3.0'

	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.apache.logging.log4j:log4j-api:2.13.1'
	compile 'org.apache.logging.log4j:log4j-core:2.13.1'
	compile 'org.springdoc:springdoc-openapi-ui:1.2.32'
	compile 'org.projectlombok:lombok'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
	compile 'io.jsonwebtoken:jjwt:0.9.1'
	compile 'com.google.guava:guava:11.0.2'
	compile 'org.springframework.boot:spring-boot-starter-mail:2.3.5.RELEASE'
	
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'com.h2database:h2'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testCompile 'org.junit.jupiter:junit-jupiter:5.6.2'
	testCompile 'io.cucumber:cucumber-java:6.6.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testCompile 'org.springframework.security:spring-security-test:5.4.1'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

task cucumber() {
	dependsOn assemble, compileTestJava
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'hyve.petshow.cucumber', 'src/test/resources']
		}
	}
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}

	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['hyve/petshow/domain/**',
							  'hyve/petshow/controller/representation/**',
							  'hyve/petshow/exceptions/**',
							  'hyve/petshow/repository/**'
					])
		})
	}

	dependsOn test
}